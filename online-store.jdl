entity Product {
	name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}

enum Size {
	S, M, L, XL, XXL
}

// an ignored comment
/** not an ignored comment */
entity ProductCategory {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Customer {
	firstName String required
    firstName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
}

enum Gender{
	MALE, FEMALE, OTHER
}
/**
 * Task entity.
 * @author The JHipster team.
 */
entity ProductOrder {
	placeDate Instant required
    status OrderStatus required
    code String required
}

enum OrderStatus{
	COMPLETED, PENDING, CANCELLED
}
/**
 * The Employee entity.
 */
entity OrderItem {
	quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus{
	AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

entity Invoice {
	date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
	PAID, ISSUED, CANCELLED
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

entity Shipment{
	trackingCode String
    date Instant required
    details String
}
relationship OneToOne {
	Customer{user(login) required} to User
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Customer{order} to ProductOrder{customer(email) required}
    ProductOrder{orderItem} to OrderItem{order(code) required}
    ProductOrder{invoice} to Invoice{order(code) required}
    Invoice{shipment} to Shipment{invoice(code) required}
    ProductCategory{product} to Product{productCategory(name)}
}

relationship ManyToOne {
	OrderItem{product(name) required} to Product
}

service * with serviceClass

// Set pagination options
paginate Product, Customer, ProductOrder, Invoice, Shipment, OrderItem with pagination


// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
